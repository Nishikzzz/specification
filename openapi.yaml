paths:
  /:
    get:
      description: "Get information about Beacon"
      operationId: getBeacon
      produces:
        - application/json
      responses:
        ? "200"
        :
          description: "OK / Call is successful"
          schema:
            items:
              $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/Beacon"

  /mitigation_strategy{dataset_id}:
    get:
      parameters:
        - name: dataset_id
          in: query
          description: dataset_id
      description: "Get Information on mitigation strategy dor a given dataset"
      operationId: getMitigationStrategyByDataset
      produces:
        - application/json
      responses:
        ? "200"
        :
          $ref: ""
          description: "OK / Call is successful"
          items: ~
          schema: ~
        ? "400"
        :
          $ref: ""
          description: "Bad request (e.g. missing mandatory parameter)"
          schema: ~
        401':
          $ref: ""
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema: ~
        ? "403"
        :
          $ref: ""
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema: ~
  /networks:
    get:
      description: "Get information about Network Membership"
      operationId: getNetworks
=======
  ? "/mitigation_strategy{dataset_id}"
  :
    get:
      parameters:
              - name: dataset_id
                in: query
                description: dataset_id
      description: "Get Information on mitigation strategy dor a given dataset"
      operationId: getMitigationStrategyByDataset
>>>>>>> 47185e1dca81e25eb4dfd8178aa9cec63ba2dcbf
      produces:
        - application/json
      responses:
        ? "200"
        :
          $ref: ""
          description: "OK / Call is successful"
          items: ~
          schema: ~
        ? "400"
        :
          $ref: ""
          description: "Bad request (e.g. missing mandatory parameter)"
          schema: ~
        401':
          $ref: ""
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema: ~
        ? "403"
        :
          $ref: ""
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema: ~
<<<<<<< HEAD
=======
  /networks:
    get:
      description: "Get information about Network Membership"
      operationId: getNetworks
      produces:
        - application/json
      responses:
        ? "200"
        :
          $ref: ""
          description: "OK / Call is successful"
          items: ~
          schema: ~
        ? "400"
        :
          $ref: ""
          description: "Bad request (e.g. missing mandatory parameter)"
          schema: ~
        401':
          $ref: ""
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema: ~
        ? "403"
        :
          $ref: ""
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema: ~
>>>>>>> 47185e1dca81e25eb4dfd8178aa9cec63ba2dcbf
  /query:
    get:
      description: "Get response to a Beacon query for allele information."
      operationId: getBeaconAlleleResponse
      parameters:
        -
          description: "Reference name (chromosome). Accepting values 1-22, X, Y."
          enum:
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
            - "8"
            - "9"
            - "10"
            - "11"
            - "12"
            - "13"
            - "14"
            - "15"
            - "16"
            - "17"
            - "18"
            - "19"
            - "20"
            - "21"
            - "22"
            - X
            - "Y"
          in: query
          name: referenceName
          required: true
          type: string
        -
          description: |
              Precise start coordinate position, allele locus (0-based).
              * start only:
                - for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified alternateBases
                - typical use are queries for SNV and small InDels
                - the use of "start" without an "end" parameter requires the use of "referenceBases"
              * start and end:
                - special use case for exactly determined structural changes
          format: int64
          in: query
          minimum: 0
          name: start
          required: false
          type: integer
        -
          description: |
              Minimum start coordinate
              * startMin + startMax + endMin + endMax
                - for querying imprecise positions (e.g. identifying all structural variants starting anywhere between startMin <-> startMax, and ending anywhere between endMin <-> endMax
                - single or douple sided precise matches can be achieved by setting startMin = startMax XOR endMin = endMax
          in: query
          name: startMin
          type: string
        -
          description: "Maximum start coordinate. See startMin.\n"
          in: query
          name: startMax
          type: string
        -
          description: "Precise end coordinate. See start.\n"
          in: query
          name: end
          type: string
        -
          description: "Minimum end coordinate. See startMin.\n"
          in: query
          name: endMin
          type: string
        -
          description: "Maximum end coordinate. See startMin.\n"
          in: query
          name: endMax
          type: string
        -
          description: |
              Reference bases for this variant (starting from `start`). Accepted values: [ACGT]*
              When querying for variants without specific base alterations (e.g. imprecise structural variants with separate variant_type as well as start_min & end_min ... parameters), the use of a single "N" value is required.
          in: query
          name: referenceBases
          pattern: "^([ACGT]+|N)$"
          required: true
          type: string
        -
          description: |
              The bases that appear instead of the reference bases. Accepted values: [ACGT]* or N.
              Symbolic ALT alleles (DEL, INS, DUP, INV, CNV, DUP:TANDEM, DEL:ME, INS:ME) will be represented in `variantType`.
              Optional: either `alternateBases` or `variantType` is required.
          in: query
          name: alternateBases
          pattern: "^([ACGT]+|N)$"
          required: false
          type: string
        -
          description: |
              The `variantType` is used to denote e.g. structural variants.
              Examples:
              * DUP: duplication of sequence following `start`; not necessarily in situ
              * DEL: deletion of sequence following `start`

              Optional: either `alternateBases` or `variantType` is required.
          in: query
          name: variantType
          required: false
          type: string
        -
          description: "Assembly identifier (GRC notation, e.g. GRCh37)."
          in: query
          name: assemblyId
          required: true
          type: string
        -
          collectionFormat: multi
          description: "Identifiers of datasets, as defined in \"BeaconDataset\". If this field is null/not specified, all datasets should be queried."
          in: query
          items:
            type: string
          name: datasetIds
          required: false
          type: array
        -
          description: |
              Indicator of whether responses for individual datasets (datasetAlleleResponses) should be included in the response (BeaconAlleleResponse) to this request or not.
              If null (not specified), the default value of NONE is assumed.
          enum:
            - ALL
            - HIT
            - MISS
            - NONE
          in: query
          name: includeDatasetResponses
          required: false
          type: string
      produces:
        - application/json
      responses:
        ? "200"
        :
          description: "OK / Call is successful"
          schema:
            items:
              $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
        ? "400"
        :
          description: "Bad request (e.g. missing mandatory parameter)"
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
        ? "401"
        :
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
        ? "403"
        :
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
    post:
      description: "Gets response to a beacon query for allele information."
      operationId: postBeaconAlleleResponse
      parameters:
        -
          in: body
          name: queryBeaconAllele
          required: true
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleRequest"
      produces:
        - application/json
      responses:
        ? "200"
        :
          description: "OK / Call is successful"
          schema:
            items:
              $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
        ? "400"
        :
          description: "Bad request (e.g. missing mandatory parameter)"
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
        ? "401"
        :
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
        ? "403"
        :
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema:
            $ref: "https://raw.githubusercontent.com/sdelatorrep/beacon-team/openapi_v2.0/beacon.yaml#/definitions/BeaconAlleleResponse"
  ? "/security/query_log{data_range}"
  :
    get:
      description: "Return a set of queries for a given data range"
      operationId: getQueryLogByData
      produces:
        - application/json
      responses:
        ? "200"
        :
          $ref: ""
          description: "OK / Call is successful"
          items: ~
          schema: ~
        ? "400"
        :
          $ref: ""
          description: "Bad request (e.g. missing mandatory parameter)"
          schema: ~
        ? "401"
        :
          $ref: ""
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema: ~
        ? "403"
        :
          $ref: ""
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema: ~
  ? "/security/query_log{user_id}"
  :
    get:
      description: "Return a set of queries for a given user id"
      operationId: getQueryLogByUserId
      produces:
        - application/json
      responses:
        ? "200"
        :
          $ref: ""
          description: "OK / Call is successful"
          items: ~
          schema: ~
        ? "400"
        :
          $ref: ""
          description: "Bad request (e.g. missing mandatory parameter)"
          schema: ~
        401':
          $ref: ""
          description: "Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)"
          schema: ~
        ? "403"
        :
          $ref: ""
          description: "Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)"
          schema: ~
definitions:
  mitigation_strategy:
    properties:
      parameter_description:
        description: "Parameter Description"
        type: string
      parameter_value:
        description: "Set value for parameter"
        type: double
      strategy_description:
        description: "Description of strategy"
        type: string
      strategy_type:
        description: "Title of strategy"
        type: string
info:
  description: "A Beacon is a web service for genetic data sharing that can be queried for information about specific alleles."
  title: "GA4GH Beacon API specification"
  version: "0.4.0"
schemes:
  - https
  - http
swagger: "2.0"
