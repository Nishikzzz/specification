"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PropTypes = require("prop-types");
var React = require("react");
var styled_components_1 = require("../../styled-components");
var services_1 = require("../../services");
var ApiInfo_1 = require("../ApiInfo/ApiInfo");
var ApiLogo_1 = require("../ApiLogo/ApiLogo");
var ContentItems_1 = require("../ContentItems/ContentItems");
var OptionsProvider_1 = require("../OptionsProvider");
var SideMenu_1 = require("../SideMenu/SideMenu");
var StickyResponsiveSidebar_1 = require("../StickySidebar/StickyResponsiveSidebar");
var elements_1 = require("./elements");
var SearchBox_1 = require("../SearchBox/SearchBox");
var Redoc = /** @class */ (function (_super) {
    __extends(Redoc, _super);
    function Redoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Redoc.prototype.componentDidMount = function () {
        this.props.store.menu.updateOnHash();
    };
    Redoc.prototype.componentWillUnmount = function () {
        this.props.store.dispose();
    };
    Redoc.prototype.render = function () {
        var _a = this.props.store, spec = _a.spec, menu = _a.menu, options = _a.options, search = _a.search, marker = _a.marker;
        var store = this.props.store;
        return (React.createElement(styled_components_1.ThemeProvider, { theme: options.theme },
            React.createElement(OptionsProvider_1.OptionsProvider, { options: options },
                React.createElement(elements_1.RedocWrap, { className: "redoc-wrap" },
                    React.createElement(StickyResponsiveSidebar_1.StickyResponsiveSidebar, { open: menu.sideBarOpened, className: "menu-content", toggleSidebar: menu.toggleSidebar.bind(menu) },
                        React.createElement(ApiLogo_1.ApiLogo, { info: spec.info }),
                        React.createElement(SearchBox_1.SearchBox, { search: search, marker: marker, getItemById: menu.getItemById, onActivate: menu.activateAndScroll }),
                        React.createElement(SideMenu_1.SideMenu, { menu: menu })),
                    React.createElement(elements_1.ApiContent, { className: "api-content" },
                        React.createElement(ApiInfo_1.ApiInfo, { store: store }),
                        React.createElement(ContentItems_1.ContentItems, { items: menu.items }))))));
    };
    Redoc.propTypes = {
        store: PropTypes.instanceOf(services_1.AppStore).isRequired,
    };
    return Redoc;
}(React.Component));
exports.Redoc = Redoc;
//# sourceMappingURL=Redoc.js.map