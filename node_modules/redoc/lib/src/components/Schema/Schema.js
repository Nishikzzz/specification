"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_react_1 = require("mobx-react");
var React = require("react");
var fields_1 = require("../../common-elements/fields");
var FieldDetails_1 = require("../Fields/FieldDetails");
var ArraySchema_1 = require("./ArraySchema");
var ObjectSchema_1 = require("./ObjectSchema");
var OneOfSchema_1 = require("./OneOfSchema");
var Schema = /** @class */ (function (_super) {
    __extends(Schema, _super);
    function Schema() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Schema.prototype.render = function () {
        var schema = this.props.schema;
        if (!schema) {
            return React.createElement("em", null, " Schema not provided ");
        }
        var type = schema.type, oneOf = schema.oneOf, discriminatorProp = schema.discriminatorProp, isCircular = schema.isCircular;
        if (isCircular) {
            return (React.createElement("div", null,
                React.createElement(fields_1.TypeName, null, schema.displayType),
                schema.title && React.createElement(fields_1.TypeTitle, null,
                    " ",
                    schema.title,
                    " "),
                React.createElement(fields_1.RecursiveLabel, null, " Recursive ")));
        }
        if (discriminatorProp !== undefined) {
            return (React.createElement(ObjectSchema_1.ObjectSchema, __assign({}, __assign({}, this.props, { schema: oneOf[schema.activeOneOf] }), { discriminator: {
                    fieldName: discriminatorProp,
                    parentSchema: schema,
                } })));
        }
        if (oneOf !== undefined) {
            return React.createElement(OneOfSchema_1.OneOfSchema, { schema: schema });
        }
        switch (type) {
            case 'object':
                return React.createElement(ObjectSchema_1.ObjectSchema, __assign({}, this.props));
            case 'array':
                return React.createElement(ArraySchema_1.ArraySchema, __assign({}, this.props));
        }
        // TODO: maybe adjust FieldDetails to accept schema
        return (React.createElement("div", null,
            React.createElement(FieldDetails_1.FieldDetails, { field: {
                    schema: schema,
                    name: '',
                    required: false,
                    description: schema.description,
                    deprecated: false,
                    toggle: function () { return null; },
                    expanded: false,
                } })));
    };
    Schema = __decorate([
        mobx_react_1.observer
    ], Schema);
    return Schema;
}(React.Component));
exports.Schema = Schema;
//# sourceMappingURL=Schema.js.map