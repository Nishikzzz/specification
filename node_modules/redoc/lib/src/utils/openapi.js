"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getStatusCodeType(statusCode, defaultAsError) {
    if (defaultAsError === void 0) { defaultAsError = false; }
    if (statusCode === 'default') {
        return defaultAsError ? 'error' : 'success';
    }
    if (statusCode < 100 || statusCode > 599) {
        throw new Error('invalid HTTP code');
    }
    var res = 'success';
    if (statusCode >= 300 && statusCode < 400) {
        res = 'redirect';
    }
    else if (statusCode >= 400) {
        res = 'error';
    }
    else if (statusCode < 200) {
        res = 'info';
    }
    return res;
}
exports.getStatusCodeType = getStatusCodeType;
var operationNames = {
    get: true,
    post: true,
    put: true,
    head: true,
    patch: true,
    delete: true,
    options: true,
};
function isOperationName(key) {
    return key in operationNames;
}
exports.isOperationName = isOperationName;
function getOperationSummary(operation) {
    return (operation.summary ||
        operation.operationId ||
        (operation.description && operation.description.substring(0, 50)) ||
        '<no summary>');
}
exports.getOperationSummary = getOperationSummary;
var schemaKeywordTypes = {
    multipleOf: 'number',
    maximum: 'number',
    exclusiveMaximum: 'number',
    minimum: 'number',
    exclusiveMinimum: 'number',
    maxLength: 'string',
    minLength: 'string',
    pattern: 'string',
    items: 'array',
    maxItems: 'array',
    minItems: 'array',
    uniqueItems: 'array',
    maxProperties: 'object',
    minProperties: 'object',
    required: 'object',
    additionalProperties: 'object',
    properties: 'object',
};
function detectType(schema) {
    if (schema.type !== undefined) {
        return schema.type;
    }
    var keywords = Object.keys(schemaKeywordTypes);
    for (var _i = 0, keywords_1 = keywords; _i < keywords_1.length; _i++) {
        var keyword = keywords_1[_i];
        var type = schemaKeywordTypes[keyword];
        if (schema[keyword] !== undefined) {
            return type;
        }
    }
    return 'any';
}
exports.detectType = detectType;
function isPrimitiveType(schema) {
    if (schema.oneOf !== undefined || schema.anyOf !== undefined) {
        return false;
    }
    if (schema.type === 'object') {
        return schema.properties !== undefined
            ? Object.keys(schema.properties).length === 0
            : schema.additionalProperties === undefined;
    }
    if (schema.type === 'array') {
        if (schema.items === undefined) {
            return true;
        }
        return false;
    }
    return true;
}
exports.isPrimitiveType = isPrimitiveType;
function isJsonLike(contentType) {
    return contentType.search(/json/i) !== -1;
}
exports.isJsonLike = isJsonLike;
function langFromMime(contentType) {
    if (contentType.search(/xml/i) !== -1) {
        return 'xml';
    }
    return 'clike';
}
exports.langFromMime = langFromMime;
function isNamedDefinition(pointer) {
    return /^#\/components\/schemas\/[^\/]+$/.test(pointer || '');
}
exports.isNamedDefinition = isNamedDefinition;
function humanizeConstraints(schema) {
    var res = [];
    var stringRange;
    if (schema.minLength !== undefined && schema.maxLength !== undefined) {
        if (schema.minLength === schema.maxLength) {
            stringRange = schema.minLength + " characters";
        }
        else {
            stringRange = "[ " + schema.minLength + " .. " + schema.maxLength + " ] characters";
        }
    }
    else if (schema.maxLength !== undefined) {
        stringRange = "<= " + schema.maxLength + " characters";
    }
    else if (schema.minLength !== undefined) {
        if (schema.minLength === 1) {
            stringRange = 'non-empty';
        }
        else {
            stringRange = ">= " + schema.minLength + " characters";
        }
    }
    if (stringRange !== undefined) {
        res.push(stringRange);
    }
    var numberRange;
    if (schema.minimum !== undefined && schema.maximum !== undefined) {
        numberRange = schema.exclusiveMinimum ? '( ' : '[ ';
        numberRange += schema.minimum;
        numberRange += ' .. ';
        numberRange += schema.maximum;
        numberRange += schema.exclusiveMaximum ? ' )' : ' ]';
    }
    else if (schema.maximum !== undefined) {
        numberRange = schema.exclusiveMaximum ? '< ' : '<= ';
        numberRange += schema.maximum;
    }
    else if (schema.minimum !== undefined) {
        numberRange = schema.exclusiveMinimum ? '> ' : '>= ';
        numberRange += schema.minimum;
    }
    if (numberRange !== undefined) {
        res.push(numberRange);
    }
    return res;
}
exports.humanizeConstraints = humanizeConstraints;
function sortByRequired(fields, order) {
    if (order === void 0) { order = []; }
    fields.sort(function (a, b) {
        if (!a.required && b.required) {
            return 1;
        }
        else if (a.required && !b.required) {
            return -1;
        }
        else if (a.required && b.required) {
            return order.indexOf(a.name) > order.indexOf(b.name) ? 1 : -1;
        }
        else {
            return 0;
        }
    });
}
exports.sortByRequired = sortByRequired;
exports.SECURITY_SCHEMES_SECTION = 'section/Authentication/';
//# sourceMappingURL=openapi.js.map