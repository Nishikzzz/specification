"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var path_1 = require("path");
var url_1 = require("url");
var ZSchema = require("z-schema");
var SecurityRequirement_1 = require("./SecurityRequirement");
var utils_1 = require("../../utils");
var Field_1 = require("./Field");
var RequestBody_1 = require("./RequestBody");
var Response_1 = require("./Response");
var ExecuteService_1 = require("../ExecuteService");
var validator = new ZSchema({
    ignoreUnknownFormats: true,
});
function validate(schema, val, parser) {
    var message = undefined;
    if (schema.type === 'number' || schema.type === 'integer') {
        val = (isFinite(val) && parseFloat(val)) || val;
    }
    if (schema.type === 'object' || schema.type === 'array') {
        try {
            val = JSON.parse(val);
        }
        catch (e) {
            return e.message;
        }
    }
    var valid = validator.validate(val, __assign({}, schema.rawSchema, { components: parser.spec.components }));
    var error = validator.getLastError();
    message = error && error.details[0].message;
    if (schema.type === 'object' && error) {
        var fieldPath = error.details[0].path.replace('#/', '').replace(/\//g, '.');
        if (fieldPath) {
            message = fieldPath + ": " + message;
        }
    }
    return valid ? undefined : message;
}
/**
 * Operation model ready to be used by components
 */
var OperationModel = /** @class */ (function () {
    function OperationModel(parser, operationSpec, parent, options) {
        var _this = this;
        this.parser = parser;
        this.type = 'operation';
        this.items = [];
        this.ready = true;
        this.active = false;
        this.activeServerIdx = 0;
        this.tryItMode = false;
        this.validateParams = function (values) {
            var res = {};
            _this.parameters.forEach(function (param) {
                var val = values[param.name];
                if (param.required && (val === undefined || (param.schema.type !== 'string' && val === ''))) {
                    res[param.name] = 'Parameter is required';
                    return;
                }
                else {
                    res[param.name] = validate(param.schema, val, _this.parser);
                }
            });
            if (_this.requestBody && _this.requestBody.content && _this.requestBody.content.active.schema) {
                var val = values.__body;
                var schema = _this.requestBody.content.active.schema;
                if (_this.requestBody.required &&
                    (val === undefined || (schema.type !== 'string' && val === ''))) {
                    res['__body'] = 'Body is required';
                }
                else {
                    res['__body'] = validate(schema, val, _this.parser);
                }
            }
            return res;
        };
        this.id = operationSpec._$ref;
        this.name = utils_1.getOperationSummary(operationSpec);
        this.description = operationSpec.description;
        this.parent = parent;
        this.externalDocs = operationSpec.externalDocs;
        this._$ref = operationSpec._$ref;
        this.deprecated = !!operationSpec.deprecated;
        this.httpVerb = operationSpec.httpVerb;
        this.deprecated = !!operationSpec.deprecated;
        this.operationId = operationSpec.operationId;
        this.requestBody =
            operationSpec.requestBody && new RequestBody_1.RequestBodyModel(parser, operationSpec.requestBody, options);
        this.codeSamples = operationSpec['x-code-samples'] || [];
        this.path = utils_1.JsonPointer.baseName(this._$ref, 2);
        this.parameters = operationSpec.pathParameters
            .concat(operationSpec.parameters || [])
            .map(function (paramOrRef) { return new Field_1.FieldModel(parser, paramOrRef, _this._$ref, options); });
        if (options.requiredPropsFirst) {
            utils_1.sortByRequired(this.parameters);
        }
        var hasSuccessResponses = false;
        this.responses = Object.keys(operationSpec.responses || [])
            .filter(function (code) {
            if (parseInt(code, 10) >= 100 && parseInt(code, 10) <= 399) {
                hasSuccessResponses = true;
            }
            return isNumeric(code) || code === 'default';
        }) // filter out other props (e.g. x-props)
            .map(function (code) {
            return new Response_1.ResponseModel(parser, code, hasSuccessResponses, operationSpec.responses[code], options);
        });
        this.servers = normalizeServers(parser.specUrl, operationSpec.servers || parser.spec.servers || []);
        this.security = (operationSpec.security || parser.spec.security || []).map(function (security) { return new SecurityRequirement_1.SecurityRequirementModel(security, parser); });
    }
    /**
     * set operation as active (used by side menu)
     */
    OperationModel.prototype.activate = function () {
        this.active = true;
    };
    /**
     * set operation as inactive (used by side menu)
     */
    OperationModel.prototype.deactivate = function () {
        this.active = false;
    };
    OperationModel.prototype.setActiveServerByIdx = function (idx) {
        this.activeServerIdx = idx;
    };
    OperationModel.prototype.toggleTryIt = function () {
        this.tryItMode = !this.tryItMode;
    };
    Object.defineProperty(OperationModel.prototype, "activeServer", {
        get: function () {
            return this.servers[this.activeServerIdx];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperationModel.prototype, "defatulParamValues", {
        get: function () {
            var res = {};
            for (var _i = 0, _a = this.parameters; _i < _a.length; _i++) {
                var param = _a[_i];
                var value = param.schema.default !== undefined
                    ? param.schema.default
                    : param.schema.example !== undefined
                        ? param.schema.example
                        : param.schema.enum !== undefined ? param.schema.enum[0] : undefined;
                if (value === undefined &&
                    param.name.toLowerCase() === 'content-type' &&
                    param.in === 'header') {
                    value =
                        (this.requestBody && this.requestBody.content && this.requestBody.content.active.name) ||
                            undefined;
                }
                res[param.name] = value;
            }
            var examples = (this.requestBody && this.requestBody.content && this.requestBody.content.active.examples) ||
                {};
            var sample = examples[Object.keys(examples)[0]];
            var sampleText = (sample && JSON.stringify((sample && sample.value) || sample, null, 2)) || '';
            res['__body'] = sampleText;
            return res;
        },
        enumerable: true,
        configurable: true
    });
    OperationModel.prototype.getHash = function () {
        return this.operationId !== undefined
            ? 'operation/' + this.operationId
            : this.parent !== undefined ? this.parent.id + this.id : this.id;
    };
    OperationModel.prototype.execute = function (params, securities) {
        var __body = params.__body, restParams = __rest(params, ["__body"]);
        return ExecuteService_1.ExecuteService.execute(this, restParams, __body, securities);
    };
    __decorate([
        mobx_1.observable
    ], OperationModel.prototype, "ready", void 0);
    __decorate([
        mobx_1.observable
    ], OperationModel.prototype, "active", void 0);
    __decorate([
        mobx_1.observable
    ], OperationModel.prototype, "activeServerIdx", void 0);
    __decorate([
        mobx_1.observable
    ], OperationModel.prototype, "tryItMode", void 0);
    __decorate([
        mobx_1.action
    ], OperationModel.prototype, "activate", null);
    __decorate([
        mobx_1.action
    ], OperationModel.prototype, "deactivate", null);
    __decorate([
        mobx_1.action.bound
    ], OperationModel.prototype, "setActiveServerByIdx", null);
    __decorate([
        mobx_1.action.bound
    ], OperationModel.prototype, "toggleTryIt", null);
    __decorate([
        mobx_1.computed
    ], OperationModel.prototype, "activeServer", null);
    __decorate([
        mobx_1.computed
    ], OperationModel.prototype, "defatulParamValues", null);
    return OperationModel;
}());
exports.OperationModel = OperationModel;
function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function normalizeServers(specUrl, servers) {
    if (servers.length === 0) {
        return [
            {
                url: specUrl,
            },
        ];
    }
    function normalizeUrl(url) {
        url = utils_1.isAbsolutePath(url) ? url : path_1.join(specUrl, url);
        return utils_1.stripTrailingSlash(url.startsWith('//') ? "" + specProtocol + url : url);
    }
    var specProtocol = url_1.parse(specUrl).protocol;
    return servers.map(function (server) {
        return __assign({}, server, { url: normalizeUrl(server.url), description: server.description || '', originalUrl: server.url });
    });
}
//# sourceMappingURL=Operation.js.map