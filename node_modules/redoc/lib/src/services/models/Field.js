"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var Schema_1 = require("./Schema");
/**
 * Field or Parameter model ready to be used by components
 */
var FieldModel = /** @class */ (function () {
    function FieldModel(parser, infoOrRef, pointer, options) {
        this.expanded = false;
        var info = parser.deref(infoOrRef);
        this.name = infoOrRef.name || info.name;
        this.in = info.in;
        this.required = !!info.required;
        var schemaPointer = (parser.isRef(infoOrRef) ? infoOrRef.$ref : pointer) + '/schema';
        this.schema = new Schema_1.SchemaModel(parser, info.schema || {}, schemaPointer, options);
        this.description =
            info.description === undefined ? this.schema.description || '' : info.description;
        this.example = info.example || this.schema.example;
        this.deprecated = info.deprecated === undefined ? !!this.schema.deprecated : info.deprecated;
        parser.exitRef(infoOrRef);
    }
    FieldModel.prototype.toggle = function () {
        this.expanded = !this.expanded;
    };
    __decorate([
        mobx_1.observable
    ], FieldModel.prototype, "expanded", void 0);
    __decorate([
        mobx_1.action
    ], FieldModel.prototype, "toggle", null);
    return FieldModel;
}());
exports.FieldModel = FieldModel;
//# sourceMappingURL=Field.js.map