"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var marked = require("marked");
var slugify_1 = require("slugify");
var utils_1 = require("../utils");
var MenuStore_1 = require("./MenuStore");
var renderer = new marked.Renderer();
marked.setOptions({
    renderer: renderer,
    highlight: function (str, lang) {
        return utils_1.highlight(str, lang);
    },
});
exports.COMPONENT_REGEXP = '^\\s*<!-- ReDoc-Inject:\\s+?{component}\\s+?-->\\s*$';
function buildComponentComment(name) {
    return "<!-- ReDoc-Inject: <" + name + "> -->";
}
exports.buildComponentComment = buildComponentComment;
var MarkdownRenderer = /** @class */ (function () {
    function MarkdownRenderer() {
        var _this = this;
        this.headings = [];
        this.headingRule = function (text, level, raw) {
            if (level === 1) {
                _this.currentTopHeading = _this.saveHeading(text);
                var id = _this.currentTopHeading.id;
                return ("<a name=\"" + id + "\"></a>" +
                    ("<h" + level + " " + MenuStore_1.SECTION_ATTR + "=\"" + id + "\" id=\"" + id + "\">") +
                    ("<a class=\"share-link\" href=\"#" + id + "\"></a>" + text + "</h" + level + ">"));
            }
            else if (level === 2) {
                var id = _this.saveHeading(text, _this.currentTopHeading && _this.currentTopHeading.items).id;
                return ("<a name=\"" + id + "\"></a>" +
                    ("<h" + level + " " + MenuStore_1.SECTION_ATTR + "=\"" + id + "\" id=\"" + id + "\">") +
                    ("<a class=\"share-link\" href=\"#" + id + "\"></a>" + text + "</h" + level + ">"));
            }
            else {
                return _this.originalHeadingRule(text, level, raw);
            }
        };
        this.headingEnhanceRenderer = new marked.Renderer();
        this.originalHeadingRule = this.headingEnhanceRenderer.heading;
        this.headingEnhanceRenderer.heading = this.headingRule;
    }
    MarkdownRenderer.prototype.saveHeading = function (name, container) {
        if (container === void 0) { container = this.headings; }
        var item = {
            id: 'section' + '/' + slugify_1.default(name),
            name: name,
            items: [],
        };
        container.push(item);
        return item;
    };
    MarkdownRenderer.prototype.flattenHeadings = function (container) {
        if (container === undefined) {
            return [];
        }
        var res = [];
        for (var _i = 0, container_1 = container; _i < container_1.length; _i++) {
            var heading = container_1[_i];
            res.push(heading);
            res.push.apply(res, this.flattenHeadings(heading.items));
        }
        return res;
    };
    MarkdownRenderer.prototype.attachHeadingsDescriptions = function (rawText) {
        var buildRegexp = function (heading) {
            return new RegExp("<h\\d " + MenuStore_1.SECTION_ATTR + "=\"" + heading.id + "\" id=\"" + heading.id + "\">");
        };
        var flatHeadings = this.flattenHeadings(this.headings);
        if (flatHeadings.length < 1) {
            return;
        }
        var prevHeading = flatHeadings[0];
        var prevPos = rawText.search(buildRegexp(prevHeading));
        for (var i = 1; i < flatHeadings.length; i++) {
            var heading = flatHeadings[i];
            var currentPos = rawText.substr(prevPos + 1).search(buildRegexp(heading)) + prevPos + 1;
            prevHeading.description = utils_1.html2Str(rawText.substring(prevPos, currentPos));
            prevHeading.rawDescription = rawText.substring(prevPos, currentPos);
            prevHeading = heading;
            prevPos = currentPos;
        }
        prevHeading.description = utils_1.html2Str(rawText.substring(prevPos));
        prevHeading.rawDescription = rawText.substring(prevPos);
    };
    MarkdownRenderer.prototype.renderMd = function (rawText, raw) {
        if (raw === void 0) { raw = true; }
        var opts = raw ? undefined : { renderer: this.headingEnhanceRenderer };
        var res = marked(rawText.toString(), opts);
        return res;
    };
    MarkdownRenderer.prototype.extractHeadings = function (rawText) {
        var text = this.renderMd(rawText, false);
        this.attachHeadingsDescriptions(text);
        var res = this.headings;
        this.headings = [];
        return res;
    };
    MarkdownRenderer.prototype.renderMdWithComponents = function (rawText, components, raw) {
        if (raw === void 0) { raw = true; }
        var componentDefs = [];
        var anyCompRegexp = new RegExp(exports.COMPONENT_REGEXP.replace('{component}', '(.*?)'), 'gmi');
        var match = anyCompRegexp.exec(rawText);
        while (match) {
            componentDefs.push(match[1]);
            match = anyCompRegexp.exec(rawText);
        }
        var splitCompRegexp = new RegExp(exports.COMPONENT_REGEXP.replace('{component}', '.*?'), 'mi');
        var htmlParts = rawText.split(splitCompRegexp);
        var res = [];
        for (var i = 0; i < htmlParts.length; i++) {
            var htmlPart = htmlParts[i];
            if (htmlPart) {
                res.push(this.renderMd(htmlPart, raw));
            }
            if (componentDefs[i]) {
                var _a = parseComponent(componentDefs[i]), componentName = _a.componentName, attrs = _a.attrs;
                if (!componentName) {
                    continue;
                }
                res.push(__assign({}, components[componentName], { attrs: attrs }));
            }
        }
        return res;
    };
    return MarkdownRenderer;
}());
exports.MarkdownRenderer = MarkdownRenderer;
function parseComponent(htmlTag) {
    var match = /<([\w_-]+).*?>/.exec(htmlTag);
    if (match === null || match.length <= 1) {
        return { componentName: undefined, attrs: {} };
    }
    var componentName = match[1];
    return {
        componentName: componentName,
        attrs: {},
    };
}
//# sourceMappingURL=MarkdownRenderer.js.map