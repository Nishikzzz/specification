"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var loadAndBundleSpec_1 = require("../utils/loadAndBundleSpec");
var MenuStore_1 = require("./MenuStore");
var models_1 = require("./models");
var RedocNormalizedOptions_1 = require("./RedocNormalizedOptions");
var ScrollService_1 = require("./ScrollService");
var SearchStore_1 = require("./SearchStore");
var MarkerService_1 = require("./MarkerService");
function createStore(spec, specUrl, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var resolvedSpec;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadAndBundleSpec_1.loadAndBundleSpec(spec || specUrl)];
                case 1:
                    resolvedSpec = _a.sent();
                    return [2 /*return*/, new AppStore(resolvedSpec, specUrl, options)];
            }
        });
    });
}
exports.createStore = createStore;
var AppStore = /** @class */ (function () {
    function AppStore(spec, specUrl, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.marker = new MarkerService_1.MarkerService();
        this.rawOptions = options;
        this.options = new RedocNormalizedOptions_1.RedocNormalizedOptions(options);
        this.scroll = new ScrollService_1.ScrollService(this.options);
        this.spec = new models_1.SpecStore(spec, specUrl, this.options);
        this.menu = new MenuStore_1.MenuStore(this.spec, this.scroll);
        this.search = new SearchStore_1.SearchStore();
        this.search.indexGroups(this.spec.operationGroups);
        this.search.done();
        this.disposer = mobx_1.observe(this.menu, 'activeItemIdx', function (change) {
            _this.updateMarkOnMenu(change.newValue);
        });
    }
    /**
     * deserialize store
     * **SUPER HACKY AND NOT OPTIMAL IMPLEMENTATION**
     */
    // TODO:
    AppStore.fromJS = function (state) {
        var inst = new AppStore(state.spec.data, state.spec.url, state.options);
        inst.menu.activeItemIdx = state.menu.activeItemIdx || 0;
        inst.menu.activate(inst.menu.flatItems[inst.menu.activeItemIdx]);
        return inst;
    };
    AppStore.prototype.updateMarkOnMenu = function (idx) {
        var start = Math.max(0, idx);
        var end = Math.min(this.menu.flatItems.length, start + 5);
        var elements = [];
        for (var i = start; i < end; i++) {
            var elem = this.menu.getElementAt(i);
            if (!elem)
                continue;
            if (this.menu.flatItems[i].type === 'section') {
                elem = elem.parentElement.parentElement;
            }
            if (elem)
                elements.push(elem);
        }
        this.marker.addOnly(elements);
        this.marker.mark();
    };
    AppStore.prototype.dispose = function () {
        this.scroll.dispose();
        this.menu.dispose();
        this.disposer();
    };
    /**
     * serializes store
     * **SUPER HACKY AND NOT OPTIMAL IMPLEMENTATION**
     */
    // TODO:
    AppStore.prototype.toJS = function () {
        return {
            menu: {
                activeItemIdx: this.menu.activeItemIdx,
            },
            spec: {
                url: this.spec.parser.specUrl,
                data: this.spec.parser.spec,
            },
            options: this.rawOptions,
        };
    };
    return AppStore;
}());
exports.AppStore = AppStore;
//# sourceMappingURL=AppStore.js.map