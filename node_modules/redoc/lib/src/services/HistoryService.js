"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decko_1 = require("decko");
var eventemitter3_1 = require("eventemitter3");
var _1 = require("../utils/");
var EVENT = 'hashchange';
function isSameHash(a, b) {
    return a === b || '#' + a === b || a === '#' + b;
}
var IntHistoryService = /** @class */ (function () {
    function IntHistoryService() {
        var _this = this;
        this.causedHashChange = false;
        this.emit = function () {
            if (_this.causedHashChange) {
                _this.causedHashChange = false;
                return;
            }
            _this._emiter.emit(EVENT, _this.hash);
        };
        this._emiter = new eventemitter3_1.EventEmitter();
        this.bind();
    }
    Object.defineProperty(IntHistoryService.prototype, "hash", {
        get: function () {
            return _1.isBrowser ? window.location.hash : '';
        },
        enumerable: true,
        configurable: true
    });
    IntHistoryService.prototype.subscribe = function (cb) {
        var emmiter = this._emiter.addListener(EVENT, cb);
        return function () { return emmiter.removeListener(EVENT, cb); };
    };
    IntHistoryService.prototype.bind = function () {
        if (_1.isBrowser) {
            window.addEventListener('hashchange', this.emit, false);
        }
    };
    IntHistoryService.prototype.dispose = function () {
        if (_1.isBrowser) {
            window.removeEventListener('hashchange', this.emit);
        }
        this.causedHashChange = false;
    };
    IntHistoryService.prototype.update = function (hash, rewriteHistory) {
        if (rewriteHistory === void 0) { rewriteHistory = false; }
        if (hash == null || isSameHash(hash, this.hash)) {
            return;
        }
        if (rewriteHistory) {
            if (_1.isBrowser) {
                window.history.replaceState(null, '', window.location.href.split('#')[0] + '#' + hash);
            }
            return;
        }
        this.causedHashChange = true;
        if (_1.isBrowser) {
            window.location.hash = hash;
        }
    };
    __decorate([
        decko_1.bind,
        decko_1.debounce
    ], IntHistoryService.prototype, "update", null);
    return IntHistoryService;
}());
exports.IntHistoryService = IntHistoryService;
exports.HistoryService = new IntHistoryService();
if (module.hot) {
    module.hot.dispose(function () {
        exports.HistoryService.dispose();
    });
}
//# sourceMappingURL=HistoryService.js.map