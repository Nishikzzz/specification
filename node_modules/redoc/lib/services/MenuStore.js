"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var dom_1 = require("../utils/dom");
var HistoryService_1 = require("./HistoryService");
var utils_1 = require("../utils");
var MenuBuilder_1 = require("./MenuBuilder");
exports.SECTION_ATTR = 'data-section-id';
/**
 * Stores all side-menu related information
 */
var MenuStore = /** @class */ (function () {
    /**
     *
     * @param spec [SpecStore](#SpecStore) which contains page content structure
     * @param _scrollService scroll service instance used by this menu
     */
    function MenuStore(spec, _scrollService) {
        var _this = this;
        this.spec = spec;
        this._scrollService = _scrollService;
        /**
         * active item absolute index (when flattened). -1 means nothing is selected
         */
        this.activeItemIdx = -1;
        /**
         * whether sidebar with menu is opened or not
         */
        this.sideBarOpened = false;
        this.getItemById = function (id) {
            return _this.flatItems.find(function (item) { return item.id === id; });
        };
        this._unsubscribe = _scrollService.subscribe(this.updateOnScroll);
        this._hashUnsubscribe = HistoryService_1.HistoryService.subscribe(this.updateOnHash);
    }
    MenuStore.prototype.toggleSidebar = function () {
        this.sideBarOpened = this.sideBarOpened ? false : true;
    };
    MenuStore.prototype.closeSidebar = function () {
        this.sideBarOpened = false;
    };
    Object.defineProperty(MenuStore.prototype, "items", {
        /**
         * top level menu items (not flattened)
         */
        get: function () {
            if (!this._items) {
                this._items = this.spec.operationGroups;
            }
            return this._items;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * update active items on scroll
     * @param isScrolledDown whether last scroll was downside
     */
    MenuStore.prototype.updateOnScroll = function (isScrolledDown) {
        var step = isScrolledDown ? 1 : -1;
        var itemIdx = this.activeItemIdx;
        while (true) {
            if (itemIdx === -1 && !isScrolledDown) {
                break;
            }
            if (itemIdx >= this.flatItems.length - 1 && isScrolledDown) {
                break;
            }
            if (isScrolledDown) {
                var el = this.getElementAt(itemIdx + 1);
                if (this._scrollService.isElementBellow(el)) {
                    break;
                }
            }
            else {
                var el = this.getElementAt(itemIdx);
                if (this._scrollService.isElementAbove(el)) {
                    break;
                }
            }
            itemIdx += step;
        }
        this.activate(this.flatItems[itemIdx], true, true);
    };
    /**
     * update active items on hash change
     * @param hash current hash
     */
    MenuStore.prototype.updateOnHash = function (hash) {
        if (hash === void 0) { hash = HistoryService_1.HistoryService.hash; }
        if (!hash) {
            return false;
        }
        var item;
        hash = hash.substr(1);
        var namespace = hash.split('/')[0];
        var ptr = decodeURIComponent(hash.substr(namespace.length + 1));
        if (namespace === 'section' || namespace === 'tag') {
            var sectionId = ptr.split('/')[0];
            ptr = ptr.substr(sectionId.length);
            var searchId_1;
            if (namespace === 'section') {
                searchId_1 = hash;
            }
            else {
                searchId_1 = ptr || namespace + '/' + sectionId;
            }
            item = this.flatItems.find(function (i) { return i.id === searchId_1; });
            if (item === undefined) {
                this._scrollService.scrollIntoViewBySelector("[" + exports.SECTION_ATTR + "=\"" + searchId_1 + "\"]");
                return false;
            }
        }
        else if (namespace === 'operation') {
            item = this.flatItems.find(function (i) {
                return i.operationId === ptr;
            });
        }
        if (item) {
            this.activateAndScroll(item, false);
        }
        return item !== undefined;
    };
    /**
     * get section/operation DOM Node related to the item or null if it doesn't exist
     * @param idx item absolute index
     */
    MenuStore.prototype.getElementAt = function (idx) {
        var item = this.flatItems[idx];
        return (item && dom_1.querySelector("[" + exports.SECTION_ATTR + "=\"" + item.id + "\"]")) || null;
    };
    Object.defineProperty(MenuStore.prototype, "activeItem", {
        /**
         * current active item
         */
        get: function () {
            return this.flatItems[this.activeItemIdx] || undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuStore.prototype, "flatItems", {
        /**
         * flattened items as they appear in the tree depth-first (top to bottom in the view)
         */
        get: function () {
            var flatItems = utils_1.flattenByProp(this._items || [], 'items');
            flatItems.forEach(function (item, idx) { return (item.absoluteIdx = idx); });
            return flatItems;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * activate menu item
     * @param item item to activate
     * @param updateHash [true] whether to update location hash
     * @param rewriteHistory [false] whether to rewrite browser history (do not create new enrty)
     */
    MenuStore.prototype.activate = function (item, updateHash, rewriteHistory) {
        if (updateHash === void 0) { updateHash = true; }
        if (rewriteHistory === void 0) { rewriteHistory = false; }
        if ((this.activeItem && this.activeItem.id) === (item && item.id)) {
            return;
        }
        this.deactivate(this.activeItem);
        if (!item) {
            HistoryService_1.HistoryService.update('', rewriteHistory);
            return;
        }
        // do not allow activating group items
        // TODO: control over options
        if (item.depth <= MenuBuilder_1.GROUP_DEPTH) {
            return;
        }
        this.activeItemIdx = item.absoluteIdx;
        if (updateHash) {
            HistoryService_1.HistoryService.update(item.getHash(), rewriteHistory);
        }
        while (item !== undefined) {
            item.activate();
            item = item.parent;
        }
    };
    /**
     * makes item and all the parents not active
     * @param item item to deactivate
     */
    MenuStore.prototype.deactivate = function (item) {
        while (item !== undefined) {
            item.deactivate();
            item = item.parent;
        }
    };
    /**
     * activate menu item and scroll to it
     * @see MenuStore.activate
     */
    MenuStore.prototype.activateAndScroll = function (item, updateHash, rewriteHistory) {
        this.activate(item, updateHash, rewriteHistory);
        this.scrollToActive();
        if (!item || !item.items.length) {
            this.closeSidebar();
        }
    };
    /**
     * scrolls to active section
     */
    MenuStore.prototype.scrollToActive = function () {
        this._scrollService.scrollIntoView(this.getElementAt(this.activeItemIdx));
    };
    MenuStore.prototype.dispose = function () {
        this._unsubscribe();
        this._hashUnsubscribe();
    };
    __decorate([
        mobx_1.observable
    ], MenuStore.prototype, "sideBarOpened", void 0);
    __decorate([
        mobx_1.action
    ], MenuStore.prototype, "toggleSidebar", null);
    __decorate([
        mobx_1.action
    ], MenuStore.prototype, "closeSidebar", null);
    __decorate([
        mobx_1.computed
    ], MenuStore.prototype, "items", null);
    __decorate([
        mobx_1.action.bound
    ], MenuStore.prototype, "updateOnScroll", null);
    __decorate([
        mobx_1.action.bound
    ], MenuStore.prototype, "updateOnHash", null);
    __decorate([
        mobx_1.computed
    ], MenuStore.prototype, "flatItems", null);
    __decorate([
        mobx_1.action
    ], MenuStore.prototype, "activate", null);
    __decorate([
        mobx_1.action.bound
    ], MenuStore.prototype, "activateAndScroll", null);
    return MenuStore;
}());
exports.MenuStore = MenuStore;
//# sourceMappingURL=MenuStore.js.map