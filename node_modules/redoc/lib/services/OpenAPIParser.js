"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var url_1 = require("url");
var _1 = require("../utils/");
var JsonPointer_1 = require("../utils/JsonPointer");
var openapi_1 = require("../utils/openapi");
var MarkdownRenderer_1 = require("./MarkdownRenderer");
/**
 * Helper class to keep track of visited references to avoid
 * endless recursion because of circular refs
 */
var RefCounter = /** @class */ (function () {
    function RefCounter() {
        this._counter = {};
    }
    RefCounter.prototype.reset = function () {
        this._counter = {};
    };
    RefCounter.prototype.visit = function (ref) {
        this._counter[ref] = this._counter[ref] ? this._counter[ref] + 1 : 1;
    };
    RefCounter.prototype.exit = function (ref) {
        this._counter[ref] = this._counter[ref] && this._counter[ref] - 1;
    };
    RefCounter.prototype.visited = function (ref) {
        return !!this._counter[ref];
    };
    return RefCounter;
}());
/**
 * Loads and keeps spec. Provides raw spec operations
 */
var OpenAPIParser = /** @class */ (function () {
    function OpenAPIParser(spec, specUrl, options) {
        var _this = this;
        this.options = options;
        this._refCounter = new RefCounter();
        /**
         * get spec part by JsonPointer ($ref)
         */
        this.byRef = function (ref) {
            var res;
            if (!_this.spec) {
                return;
            }
            if (ref.charAt(0) !== '#') {
                ref = '#' + ref;
            }
            ref = decodeURIComponent(ref);
            try {
                res = JsonPointer_1.JsonPointer.get(_this.spec, ref);
            }
            catch (e) {
                // do nothing
            }
            return res;
        };
        this.validate(spec);
        this.preprocess(spec);
        this.spec = spec;
        var href = _1.isBrowser ? window.location.href : '';
        if (typeof specUrl === 'string') {
            this.specUrl = url_1.resolve(href, specUrl);
        }
        else {
            this.specUrl = href;
        }
    }
    OpenAPIParser.prototype.validate = function (spec) {
        if (spec.openapi === undefined) {
            throw new Error('Document must be valid OpenAPI 3.0.0 definition');
        }
    };
    OpenAPIParser.prototype.preprocess = function (spec) {
        if (!this.options.noAutoAuth &&
            spec.info &&
            spec.components &&
            spec.components.securitySchemes) {
            // Automatically inject Authentication section with SecurityDefinitions component
            var description = spec.info.description || '';
            var securityRegexp = new RegExp(MarkdownRenderer_1.COMPONENT_REGEXP.replace('{component}', '<security-definitions>'), 'gmi');
            if (!securityRegexp.test(description)) {
                var comment = MarkdownRenderer_1.buildComponentComment('security-definitions');
                spec.info.description = _1.appendToMdHeading(description, 'Authentication', comment);
            }
        }
    };
    /**
     * checks if the objectt is OpenAPI reference (containts $ref property)
     */
    OpenAPIParser.prototype.isRef = function (obj) {
        if (!obj) {
            return false;
        }
        return obj.$ref !== undefined && obj.$ref !== null;
    };
    /**
     * resets visited enpoints. should be run after
     */
    OpenAPIParser.prototype.resetVisited = function () {
        if (__DEV__) {
            // check in dev mode
            for (var k in this._refCounter._counter) {
                if (this._refCounter._counter[k] > 0) {
                    console.warn('Not exited reference: ' + k);
                }
            }
        }
        this._refCounter = new RefCounter();
    };
    OpenAPIParser.prototype.exitRef = function (ref) {
        if (!this.isRef(ref)) {
            return;
        }
        this._refCounter.exit(ref.$ref);
    };
    /**
     * Resolve given reference object or return as is if it is not a reference
     * @param obj object to dereference
     * @param forceCircular whether to dereference even if it is cirular ref
     */
    OpenAPIParser.prototype.deref = function (obj, forceCircular) {
        if (forceCircular === void 0) { forceCircular = false; }
        if (this.isRef(obj)) {
            var resolved = this.byRef(obj.$ref);
            var visited = this._refCounter.visited(obj.$ref);
            this._refCounter.visit(obj.$ref);
            if (visited && !forceCircular) {
                // circular reference detected
                // tslint:disable-next-line
                return Object.assign({}, resolved, { 'x-circular-ref': true });
            }
            // deref again in case one more $ref is here
            if (this.isRef(resolved)) {
                var res = this.deref(resolved);
                this.exitRef(resolved);
                return res;
            }
            return resolved;
        }
        return obj;
    };
    /**
     * Merge allOf contsraints.
     * @param schema schema with allOF
     * @param $ref pointer of the schema
     * @param forceCircular whether to dereference children even if it is a cirular ref
     */
    OpenAPIParser.prototype.mergeAllOf = function (schema, $ref, forceCircular) {
        var _this = this;
        if (forceCircular === void 0) { forceCircular = false; }
        if (schema.allOf === undefined) {
            return schema;
        }
        var receiver = __assign({}, schema, { allOf: undefined, parentRefs: [] });
        var allOfSchemas = schema.allOf.map(function (subSchema) {
            var resolved = _this.deref(subSchema, forceCircular);
            var subRef = subSchema.$ref || undefined;
            var subMerged = _this.mergeAllOf(resolved, subRef, forceCircular);
            (_a = receiver.parentRefs).push.apply(_a, (subMerged.parentRefs || []));
            return {
                $ref: subRef,
                schema: subMerged,
            };
            var _a;
        });
        for (var _i = 0, allOfSchemas_1 = allOfSchemas; _i < allOfSchemas_1.length; _i++) {
            var _a = allOfSchemas_1[_i], subSchemaRef = _a.$ref, subSchema = _a.schema;
            if (receiver.type !== subSchema.type &&
                receiver.type !== undefined &&
                subSchema.type !== undefined) {
                throw new Error("Uncopatible types in allOf at \"" + $ref + "\"");
            }
            if (subSchema.type !== undefined) {
                receiver.type = subSchema.type;
            }
            if (subSchema.properties !== undefined) {
                // TODO: merge properties contents
                receiver.properties = __assign({}, (receiver.properties || {}), subSchema.properties);
            }
            if (subSchema.required !== undefined) {
                receiver.required = (receiver.required || []).concat(subSchema.required);
            }
            // merge rest of constraints
            // TODO: do more intelegent merge
            receiver = __assign({}, subSchema, receiver);
            if (subSchemaRef) {
                receiver.parentRefs.push(subSchemaRef);
                if (receiver.title === undefined && openapi_1.isNamedDefinition(subSchemaRef)) {
                    receiver.title = JsonPointer_1.JsonPointer.baseName(subSchemaRef);
                }
            }
        }
        // name of definition or title on top level
        if (schema.title === undefined && openapi_1.isNamedDefinition($ref)) {
            receiver.title = JsonPointer_1.JsonPointer.baseName($ref);
        }
        return receiver;
    };
    /**
     * Find all derived definitions among #/components/schemas from any of $refs
     * returns map of definition pointer to definition name
     * @param $refs array of references to find derived from
     */
    OpenAPIParser.prototype.findDerived = function ($refs) {
        var res = {};
        var schemas = (this.spec.components && this.spec.components.schemas) || {};
        for (var defName in schemas) {
            var def = this.deref(schemas[defName]);
            if (def.allOf !== undefined &&
                def.allOf.find(function (obj) { return obj.$ref !== undefined && $refs.indexOf(obj.$ref) > -1; })) {
                res['#/components/schemas/' + defName] = defName;
            }
        }
        return res;
    };
    __decorate([
        mobx_1.observable
    ], OpenAPIParser.prototype, "specUrl", void 0);
    __decorate([
        mobx_1.observable.ref
    ], OpenAPIParser.prototype, "spec", void 0);
    return OpenAPIParser;
}());
exports.OpenAPIParser = OpenAPIParser;
//# sourceMappingURL=OpenAPIParser.js.map