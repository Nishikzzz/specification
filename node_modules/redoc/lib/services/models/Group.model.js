"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var slugify_1 = require("slugify");
/**
 * Operations Group model ready to be used by components
 */
var GroupModel = /** @class */ (function () {
    //#endregion
    function GroupModel(type, tagOrGroup, parent) {
        this.items = [];
        this.active = false;
        this.id = type + '/' + slugify_1.default(tagOrGroup.name);
        this.type = type;
        this.name = tagOrGroup['x-displayName'] || tagOrGroup.name;
        this.description = tagOrGroup.description || '';
        this.parent = parent;
        this.externalDocs = tagOrGroup.externalDocs;
        // groups are active (expanded) by default
        if (this.type === 'group') {
            this.active = true;
        }
    }
    GroupModel.prototype.activate = function () {
        this.active = true;
    };
    GroupModel.prototype.deactivate = function () {
        // disallow deactivating groups
        if (this.type === 'group') {
            return;
        }
        this.active = false;
    };
    GroupModel.prototype.getHash = function () {
        return this.id;
    };
    __decorate([
        mobx_1.observable
    ], GroupModel.prototype, "active", void 0);
    __decorate([
        mobx_1.action
    ], GroupModel.prototype, "activate", null);
    __decorate([
        mobx_1.action
    ], GroupModel.prototype, "deactivate", null);
    return GroupModel;
}());
exports.GroupModel = GroupModel;
//# sourceMappingURL=Group.model.js.map