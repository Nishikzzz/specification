"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var path_1 = require("path");
var url_1 = require("url");
var SecurityRequirement_1 = require("./SecurityRequirement");
var utils_1 = require("../../utils");
var Field_1 = require("./Field");
var RequestBody_1 = require("./RequestBody");
var Response_1 = require("./Response");
/**
 * Operation model ready to be used by components
 */
var OperationModel = /** @class */ (function () {
    function OperationModel(parser, operationSpec, parent, options) {
        var _this = this;
        this.type = 'operation';
        this.items = [];
        this.ready = true;
        this.active = false;
        this.id = operationSpec._$ref;
        this.name = utils_1.getOperationSummary(operationSpec);
        this.description = operationSpec.description;
        this.parent = parent;
        this.externalDocs = operationSpec.externalDocs;
        this._$ref = operationSpec._$ref;
        this.deprecated = !!operationSpec.deprecated;
        this.httpVerb = operationSpec.httpVerb;
        this.deprecated = !!operationSpec.deprecated;
        this.operationId = operationSpec.operationId;
        this.requestBody =
            operationSpec.requestBody && new RequestBody_1.RequestBodyModel(parser, operationSpec.requestBody, options);
        this.codeSamples = operationSpec['x-code-samples'] || [];
        this.path = utils_1.JsonPointer.baseName(this._$ref, 2);
        this.parameters = operationSpec.pathParameters
            .concat(operationSpec.parameters || [])
            .map(function (paramOrRef) { return new Field_1.FieldModel(parser, paramOrRef, _this._$ref, options); });
        var hasSuccessResponses = false;
        this.responses = Object.keys(operationSpec.responses || [])
            .filter(function (code) {
            if (parseInt(code, 10) >= 100 && parseInt(code, 10) <= 399) {
                hasSuccessResponses = true;
            }
            return isNumeric(code) || code === 'default';
        }) // filter out other props (e.g. x-props)
            .map(function (code) {
            return new Response_1.ResponseModel(parser, code, hasSuccessResponses, operationSpec.responses[code], options);
        });
        this.servers = normalizeServers(parser.specUrl, operationSpec.servers || parser.spec.servers || []);
        this.security = (operationSpec.security || parser.spec.security || []).map(function (security) { return new SecurityRequirement_1.SecurityRequirementModel(security, parser); });
    }
    /**
     * set operation as active (used by side menu)
     */
    OperationModel.prototype.activate = function () {
        this.active = true;
    };
    /**
     * set operation as inactive (used by side menu)
     */
    OperationModel.prototype.deactivate = function () {
        this.active = false;
    };
    OperationModel.prototype.getHash = function () {
        return this.operationId !== undefined
            ? 'operation/' + this.operationId
            : this.parent !== undefined ? this.parent.id + this.id : this.id;
    };
    __decorate([
        mobx_1.observable
    ], OperationModel.prototype, "ready", void 0);
    __decorate([
        mobx_1.observable
    ], OperationModel.prototype, "active", void 0);
    __decorate([
        mobx_1.action
    ], OperationModel.prototype, "activate", null);
    __decorate([
        mobx_1.action
    ], OperationModel.prototype, "deactivate", null);
    return OperationModel;
}());
exports.OperationModel = OperationModel;
function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function normalizeServers(specUrl, servers) {
    if (servers.length === 0) {
        return [
            {
                url: specUrl,
            },
        ];
    }
    function normalizeUrl(url) {
        url = utils_1.isAbsolutePath(url) ? url : path_1.join(specUrl, url);
        return utils_1.stripTrailingSlash(url.startsWith('//') ? "" + specProtocol + url : url);
    }
    var specProtocol = url_1.parse(specUrl).protocol;
    return servers.map(function (server) {
        return __assign({}, server, { url: normalizeUrl(server.url), description: server.description || '' });
    });
}
//# sourceMappingURL=Operation.js.map